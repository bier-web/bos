

riot.tag2('grid-item', '<td class="{typeof parent.opts.gridProperties.properties.item_tap == &quot;function&quot; ? &quot;cursor pointer&quot; : &quot;&quot;} {c.type} {(typeof c.class == &quot;string&quot;) ? c.class : &quot;&quot;}" each="{c, index in opts.gridProperties.properties.dataColumns}" if="{!c.ignoreByColSpan}" colspan="{c.colSpan!=undefined ? c.colSpan : c.colSpanField!=undefined ? parent.opts.data[c.colSpanField] : undefined}" data-index="{index}" onclick="{columnOnClick}"> <div class="{(typeof c.label === &quot;function&quot;) ? (getLabel()).class : c.label}" if="{typeof c.label != &quot;undefined&quot;}">{(typeof c.label === ⁗function⁗) ? (getLabel()).title : c.label.title}</div> <label class="{c.class}" if="{c.type == &quot;object&quot;}">{JSON.stringify(parent.opts.data[c.name])}</label> <label class="{c.class}" if="{c.type == &quot;text&quot;}">{parent.opts.data[c.name]}</label> <label class="{c.class}" if="{c.type == &quot;number&quot;}">{parent.opts.data[c.name]}</label> <label class="{c.class}" if="{c.type == &quot;date&quot;}">{((typeof parent.opts.data[c.name] === \'undefined\') || (typeof parent.opts.data[c.name] !== \'undefined\' && (parent.opts.data[c.name] == null || parent.opts.data[c.name] == \'\' ))) ? \'Sem data definida\' : moment(parent.opts.data[c.name]).format(c.format)}</label> <label class="{c.class}" if="{c.type == &quot;time&quot;}">{moment(parent.opts.data[c.name]).format(c.format)}</label> <label class="{c.class}" if="{c.type == &quot;money&quot;}">{(parent.opts.data[c.name]).formatMoney(2, ⁗⁗, ⁗.⁗, ⁗,⁗)}</label><img class="{c.class}" if="{c.type == &quot;image&quot;}" riot-src="{parent.opts.data[c.name]}"><img class="ui tiny avatar image {c.class}" if="{c.type == &quot;avatar&quot;}" riot-src="{parent.opts.data[c.name]}"><i class="{c.class} {typeof (c.icon) === &quot;function&quot; ? getIcon() : c.icon}" if="{c.type == &quot;icon&quot;}" title="{typeof(c.tooltip) === &quot;function&quot; ? getTooltip() : c.tooltip}"></i> <button-tag if="{c.type == &quot;button&quot;}" each=" {btn in c.actionButtons}" button-type="{btn.type}" button-click="{parent.defaultClick}" button-enabled="{(btn.type === helpersWebApp.both().actions.edit &amp;&amp; parent.opts.gridProperties.collection.permissionOptions.canEdit) || (btn.type === helpersWebApp.both().actions.remove &amp;&amp; parent.opts.gridProperties.collection.permissionOptions.canRemove &amp;&amp; !parent.opts.data.systemIsProtected) || btn.enabled===true}"></button-tag> <grid-checkbox if="{c.type == &quot;checkbox&quot;}" data="{parent.opts.data}" is-checked="{parent.opts.data[c.name]}" checkbox-click="{c.onClick}"></grid-checkbox><a class="{c.class}" if="{c.type == &quot;mail&quot;}" target="_blank" href="mailto:{parent.opts.data[c.name]}">{parent.opts.data[c.name]}</a><a class="{c.class}" if="{c.type == &quot;telephone&quot;}" target="_blank" href="tel:{parent.opts.data[c.name]}">{parent.opts.data[c.name]}</a><a class="{c.class}" if="{c.type == &quot;link&quot;}" target="_blank" href="{parent.opts.data[c.name]}">{parent.opts.data[c.name]}</a> </td>', '', 'class="grid-item"', function(opts) {
gridItemTag.call(this, this.opts)
});